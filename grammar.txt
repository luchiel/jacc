primary_expression
    : TOK_IDENT
    | TOK_INT_CONST
    | TOK_FLOAT_CONST
    | TOK_STRING_CONST
    | '(' expression ')'
    ;

postfix_expression
    : primary_expression
    | postfix_expression '[' expression ']'
    | postfix_expression '(' (argument_expression_list)? ')'
    | postfix_expression '.' IDENT
    | postfix_expression '-> IDENT
    | postfix_expression ('++' | '--')
    ;

argument_expression_list
    : assignment_expression
    | argument_expression_list ',' assignment_expression
    ;

unary_expression
    : postfix_expression
    | '++' unary_expression
    | '--' unary_expression
    | unary_operator cast_expression
    | SIZEOF unary_expression
    | SIZEOF '(' type_name ')'
    ;

unary_operator
    : '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

cast_expression
    : unary_expression
    | '(' type_name ')' cast_expression
    ;

multiplicative_expression
    :
    | cast_expression (('*' | '/' | '%') cast_expression)*
    ;

additive_expression
    : multiplicative_expression (('+' | '-') multiplicative_expression)*
    ;

shift_expression
    : additive_expression (('<<' | '>>') additive_expression)*
    ;

relational_expression
    : shift_expression (('<' | '>' | '<=' | '>=') shift_expression)*
    ;

equality_expression
    : relational_expression (('==' | '!=') relational_expression)*
    ;

and_expression
    : equality_expression ('&' equality_expression)*
    ;

exclusive_or_expression
    : and_expression ('^' and_expression)*
    ;

inclusive_or_expression
    : exclusive_or_expression ('|' exclusive_or_expression)*
    ;

logical_and_expression
    : inclusive_or_expression ('&&' inclusive_or_expression)*
    ;

logical_or_expression
    : logical_and_expression ('||' logical_and_expression)*
    ;

conditional_expression
    : logical_or_expression ('?' expression ':' conditional_expression)?
    ;

assignment_expression
    : conditional_expression
    | unary_expression assignment_operator assignment_expression
    ;

assignment_operator
    : '='
    | '*='
    | '/='
    | '%='
    | '+='
    | '-='
    | '<<='
    | '>>='
    | '&='
    | '^='
    | '|='
    ;

expression
    : assignment_expression (',' assignment_expression)*
    ;

constant_expression
    : conditional_expression
    ;

declaration
    | declaration_specifiers (init_declarator_list)? ';'
    ;

declaration_specifiers
    : (storage_class_specifier | type_specifier | type_qualifier) (declaration_specifiers)?
    ;

init_declarator_list
    : init_declarator (',' init_declarator)*
    ;

init_declarator
    : declarator ('=' initializer)?
    ;

storage_class_specifier
    : TYPEDEF
    | EXTERN
    | STATIC
    ;

type_specifier
    : VOID
    | CHAR
    | INT
    | FLOAT
    | DOUBLE
    | struct_or_union_specifier
    | enum_specifier
    | TYPE_NAME
    ;

struct_or_union_specifier
    | (STRUCT | UNION) (IDENT)? ('{' struct_declaration_list '}')?
    ;

struct_declaration_list
    : (struct_declaration)+
    ;

struct_declaration
    : specifier_qualifier_list struct_declarator_list ';'
    ;

specifier_qualifier_list
    : (type_specifier | type_qualifier) (specifier_qualifier_list)?
    ;

struct_declarator_list
    : struct_declarator (',' struct_declarator)*
    ;

struct_declarator
    : declarator
    | ':' constant_expression
    | declarator ':' constant_expression
    ;

enum_specifier
    : ENUM '{' enumerator_list '}'
    | ENUM IDENT '{' enumerator_list '}'
    | ENUM IDENT
    ;

enumerator_list
    : enumerator (',' enumerator)*
    ;

enumerator
    : IDENT ('=' constant_expression)?
    ;

type_qualifier
    : CONST
    ;

declarator
    : (pointer)? direct_declarator
    ;

direct_declarator
    : IDENT
    | '(' declarator ')'
    | direct_declarator '[' (constant_expression)? ']'
    | direct_declarator '(' (parameter_type_list | IDENT_list)? ')'
    ;

pointer
    : '*' (type_qualifier_list)? (pointer)?
    ;

type_qualifier_list
    : (type_qualifier)+
    ;


parameter_type_list
    : parameter_list (',' '...')?
    ;

parameter_list
    : parameter_declaration (',' parameter_declaration)*
    ;

parameter_declaration
    : declaration_specifiers (declarator | abstract_declarator)?
    ;

IDENT_list
    : IDENT (',' IDENT)*
    ;

type_name
    : specifier_qualifier_list (abstract_declarator)?
    ;

abstract_declarator
    : pointer
    | direct_abstract_declarator
    | pointer direct_abstract_declarator
    ;

direct_abstract_declarator
    : '(' abstract_declarator ')'
    | (direct_abstract_declarator)? '[' (constant_expression)? ']'
    | (direct_abstract_declarator)? '(' (parameter_type_list)? ')'
    ;

initializer
    : assignment_expression
    | '{' initializer_list (',')? '}'
    ;

initializer_list
    : initializer (',' initializer)*
    ;

statement
    : labeled_statement
    | compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    | jump_statement
    ;

labeled_statement
    : CASE constant_expression ':' statement
    | DEFAULT ':' statement
    ;

compound_statement
    : '{' (declaration_list)? (statement_list)? '}'
    ;

declaration_list
    : (declaration)+
    ;

statement_list
    : (statement)+
    ;

expression_statement
    : (expression)? ';'
    ;

selection_statement
    : IF '(' expression ')' statement (ELSE statement)?
    | SWITCH '(' expression ')' statement
    ;

iteration_statement
    : WHILE '(' expression ')' statement
    | DO statement WHILE '(' expression ')' ';'
    | FOR '(' expression_statement expression_statement expression? ')' statement
    ;

jump_statement
    : CONTINUE ';'
    | BREAK ';'
    | RETURN ';'
    | RETURN expression ';'
    ;

translation_unit
    : (translation_unit)+
    ;

external_declaration
    : function_definition
    | declaration
    ;

function_definition
    : declaration_specifiers declarator (declaration_list)? compound_statement
    | declarator (declaration_list)? compound_statement
    ;