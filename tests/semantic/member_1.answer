member_test is function returning nothing defined as {
   (list)
   [
      tag "@struct1" is struct @struct1 defined as {
         a is field of type <int>
         b is field of type <int>
         c is field of type <int>
         tag "@struct2" is struct @struct2 defined as {
            c is field of type <char>
         }
         s is field of type <struct @struct2>
         tag "@struct3" is union @struct3 defined as {
            a is field of type <int>
            t is field of type <char>
         }
         u is field of type <union @struct3>
      }
      t is variable of type <struct @struct1>
      r is variable of type <pointer to struct @struct1>
   ]
    +-(.) -> <int>
       |
       +-(var t) -> <struct @struct1>
       |
       +-(ident a) -> <field of type <int>>

    +-(.) -> <char>
       |
       +-(.) -> <struct @struct2>
       |  |
       |  +-(var t) -> <struct @struct1>
       |  |
       |  +-(ident s) -> <field of type <struct @struct2>>
       |
       +-(ident c) -> <field of type <char>>

    +-(.) -> <int>
       |
       +-(.) -> <union @struct3>
       |  |
       |  +-(var t) -> <struct @struct1>
       |  |
       |  +-(ident u) -> <field of type <union @struct3>>
       |
       +-(ident a) -> <field of type <int>>

    +-(.) -> <int>
       |
       +-(*) -> <struct @struct1>
       |  |
       |  +-(var r) -> <pointer to struct @struct1>
       |
       +-(ident c) -> <field of type <int>>

    +-(.) -> <char>
       |
       +-(.) -> <struct @struct2>
       |  |
       |  +-(*) -> <struct @struct1>
       |  |  |
       |  |  +-(var r) -> <pointer to struct @struct1>
       |  |
       |  +-(ident s) -> <field of type <struct @struct2>>
       |
       +-(ident c) -> <field of type <char>>

    +-(.) -> <int>
       |
       +-(.) -> <union @struct3>
       |  |
       |  +-(*) -> <struct @struct1>
       |  |  |
       |  |  +-(var r) -> <pointer to struct @struct1>
       |  |
       |  +-(ident u) -> <field of type <union @struct3>>
       |
       +-(ident a) -> <field of type <int>>
}